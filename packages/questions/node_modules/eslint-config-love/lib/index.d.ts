declare const config: {
    extends: string;
    plugins: string[];
    parser: string;
    parserOptions: {
        project: boolean;
    };
    rules: {
        '@typescript-eslint/no-use-before-define': ["error", {
            functions: boolean;
            classes: boolean;
            enums: boolean;
            variables: boolean;
            typedefs: boolean;
        }];
        '@typescript-eslint/adjacent-overload-signatures': "error";
        '@typescript-eslint/array-type': ["error", {
            default: string;
        }];
        '@typescript-eslint/await-thenable': "error";
        '@typescript-eslint/ban-ts-comment': ["error", {
            'ts-expect-error': string;
            'ts-ignore': boolean;
            'ts-nocheck': boolean;
            'ts-check': boolean;
            minimumDescriptionLength: number;
        }];
        '@typescript-eslint/ban-tslint-comment': "error";
        '@typescript-eslint/ban-types': ["error", {
            extendDefaults: boolean;
            types: {
                String: {
                    message: string;
                    fixWith: string;
                };
                Boolean: {
                    message: string;
                    fixWith: string;
                };
                Number: {
                    message: string;
                    fixWith: string;
                };
                Symbol: {
                    message: string;
                    fixWith: string;
                };
                BigInt: {
                    message: string;
                    fixWith: string;
                };
                Function: {
                    message: string;
                };
                Object: {
                    message: string;
                };
                '{}': {
                    message: string;
                };
            };
        }];
        '@typescript-eslint/class-literal-property-style': ["error", string];
        '@typescript-eslint/comma-dangle': ["error", {
            arrays: string;
            objects: string;
            imports: string;
            exports: string;
            functions: string;
            enums: string;
            generics: string;
            tuples: string;
        }];
        '@typescript-eslint/consistent-generic-constructors': ["error", string];
        '@typescript-eslint/consistent-indexed-object-style': ["error", string];
        '@typescript-eslint/consistent-type-assertions': ["error", {
            assertionStyle: string;
            objectLiteralTypeAssertions: string;
        }];
        '@typescript-eslint/consistent-type-definitions': ["error", string];
        '@typescript-eslint/consistent-type-exports': ["error", {
            fixMixedExportsWithInlineTypeSpecifier: boolean;
        }];
        '@typescript-eslint/consistent-type-imports': ["error", {
            prefer: string;
            disallowTypeAnnotations: boolean;
            fixStyle: string;
        }];
        '@typescript-eslint/explicit-function-return-type': ["error", {
            allowExpressions: boolean;
            allowHigherOrderFunctions: boolean;
            allowTypedFunctionExpressions: boolean;
            allowDirectConstAssertionInArrowFunctions: boolean;
        }];
        '@typescript-eslint/member-delimiter-style': ["error", {
            multiline: {
                delimiter: string;
            };
            singleline: {
                delimiter: string;
                requireLast: boolean;
            };
        }];
        '@typescript-eslint/method-signature-style': "error";
        '@typescript-eslint/naming-convention': ["error", {
            selector: string;
            leadingUnderscore: string;
            trailingUnderscore: string;
            format: string[];
        }];
        '@typescript-eslint/no-base-to-string': "error";
        '@typescript-eslint/no-confusing-void-expression': ["error", {
            ignoreArrowShorthand: boolean;
            ignoreVoidOperator: boolean;
        }];
        '@typescript-eslint/no-dynamic-delete': "error";
        '@typescript-eslint/no-empty-interface': ["error", {
            allowSingleExtends: boolean;
        }];
        '@typescript-eslint/no-extra-non-null-assertion': "error";
        '@typescript-eslint/no-extraneous-class': ["error", {
            allowWithDecorator: boolean;
        }];
        '@typescript-eslint/no-floating-promises': "error";
        '@typescript-eslint/no-for-in-array': "error";
        '@typescript-eslint/no-invalid-void-type': "error";
        '@typescript-eslint/no-misused-new': "error";
        '@typescript-eslint/no-misused-promises': "error";
        '@typescript-eslint/no-namespace': "error";
        '@typescript-eslint/no-non-null-asserted-optional-chain': "error";
        '@typescript-eslint/no-non-null-assertion': "error";
        '@typescript-eslint/no-this-alias': ["error", {
            allowDestructuring: boolean;
        }];
        '@typescript-eslint/no-unnecessary-boolean-literal-compare': "error";
        '@typescript-eslint/no-unnecessary-type-assertion': "error";
        '@typescript-eslint/no-unnecessary-type-constraint': "error";
        '@typescript-eslint/no-unsafe-argument': "error";
        '@typescript-eslint/no-var-requires': "error";
        '@typescript-eslint/non-nullable-type-assertion-style': "error";
        '@typescript-eslint/prefer-function-type': "error";
        '@typescript-eslint/prefer-includes': "error";
        '@typescript-eslint/prefer-nullish-coalescing': ["error", {
            ignoreConditionalTests: boolean;
            ignoreMixedLogicalExpressions: boolean;
        }];
        '@typescript-eslint/prefer-optional-chain': "error";
        '@typescript-eslint/prefer-readonly': "error";
        '@typescript-eslint/prefer-reduce-type-parameter': "error";
        '@typescript-eslint/prefer-return-this-type': "error";
        '@typescript-eslint/prefer-ts-expect-error': "error";
        '@typescript-eslint/promise-function-async': "error";
        '@typescript-eslint/require-array-sort-compare': ["error", {
            ignoreStringArrays: boolean;
        }];
        '@typescript-eslint/restrict-plus-operands': ["error", {
            skipCompoundAssignments: boolean;
        }];
        '@typescript-eslint/restrict-template-expressions': ["error", {
            allowNumber: boolean;
        }];
        '@typescript-eslint/return-await': ["error", string];
        '@typescript-eslint/strict-boolean-expressions': ["error", {
            allowString: boolean;
            allowNumber: boolean;
            allowNullableObject: boolean;
            allowNullableBoolean: boolean;
            allowNullableString: boolean;
            allowNullableNumber: boolean;
            allowAny: boolean;
        }];
        '@typescript-eslint/triple-slash-reference': ["error", {
            lib: string;
            path: string;
            types: string;
        }];
        '@typescript-eslint/type-annotation-spacing': "error";
        '@typescript-eslint/unbound-method': ["error", {
            ignoreStatic: boolean;
        }];
        'no-void': ["error", {
            allowAsStatement: boolean;
        }];
        camelcase: "off";
        'no-use-before-define': "off";
        'comma-dangle': "off";
        'no-undef': "off";
    };
};
export = config;
